{"meta":{"title":"Alpaca Tech Farm","subtitle":null,"description":null,"author":"alpaca0984","url":"http://alpaca0984.github.io"},"pages":[],"posts":[{"title":"Call Azure's Text Analytics API from JavaScript","slug":"Call-Azure-s-Text-Analytics-API-from-JavaScript","date":"2017-09-03T05:07:21.000Z","updated":"2017-09-03T10:05:07.000Z","comments":true,"path":"2017/09/03/Call-Azure-s-Text-Analytics-API-from-JavaScript/","link":"","permalink":"http://alpaca0984.github.io/2017/09/03/Call-Azure-s-Text-Analytics-API-from-JavaScript/","excerpt":"","text":"Previously, I created docker environment with Nginx, Rails and Postgres.Nginx, Rails and Postgres with docker-compose In it, I ran a rails application with Azure’s Text Analytics API.With it, I made app which detect key phrases from text. Register Azure and get trial access token of the APIYou can do it from here (free trial token valids only 30 days).Microsoft Azure - Text Analytics API Setup in railsCreate controller in rails container.I created docker environment in this post.1$ docker-compose run app bundle exec rails g controller smash Configure routing.$ vim config/routes.rb12345Rails.application.routes.draw do # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html+ resources :smash, only: :index+ root 'smash#index'end Write view and call the APIThis is over view. Set text to a textare. Press submit button. We send the text to Text Analytics API and receive extracted words. Here is my code.In the code calling API, you have to pass your API key which you get in your Azure member page.$ vim app/views/smash/index.erb1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!-- Cute Alpaca icon and title. --&gt;&lt;div style=\"margin-bottom: 16px\"&gt; &lt;img style=\"width: 38px; height: 38px\" src=\"https://i.pinimg.com/originals/a6/bd/07/a6bd07140b8e12855ce842f189d8fa36.jpg\" alt=\"Smiley face\" /&gt; &lt;span style=\"font-size: 32px\"&gt;Smash text into words&lt;/span&gt;&lt;/div&gt;&lt;!-- Input text area and submit button. --&gt;&lt;div style=\"display: inline-block\"&gt; &lt;textarea name=\"name\" id=\"js-inputText\" rows=\"8\" cols=\"80\"&gt;&lt;/textarea&gt; &lt;button type=\"submit\" name=\"submit\" id=\"js-submit\"&gt;Send&lt;/button&gt;&lt;/div&gt;&lt;!-- Set results from calling API. --&gt;&lt;p&gt;Result&lt;/p&gt;&lt;ul id=\"resultList\" style=\"list-style: none\"&gt;&lt;/ul&gt;&lt;script type=\"text/javascript\"&gt;'use strict';document.addEventListener(\"DOMContentLoaded\", () =&gt; &#123; // When sugmit button clicked, call Azure Text Analytics API. document.getElementById('js-submit').addEventListener('click', listener =&gt; &#123; const inputText = document.getElementById('js-inputText').value; const requestBody = &#123; \"documents\": [ &#123; \"language\": \"en\", \"id\": \"1\", \"text\": inputText, &#125; ] &#125;; // API request (requestBody =&gt; &#123; const request = new XMLHttpRequest(); request.open('POST', 'https://westus.api.cognitive.microsoft.com/text/analytics/v2.0/keyPhrases', true); request.setRequestHeader(\"Content-Type\", \"application/json\"); request.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \"xxxxxxxxxxxxxxxxxxxxx\"); // Set API key. request.setRequestHeader(\"Accept\",\"application/json\"); request.onload = () =&gt; &#123; const resultList = document.getElementById('resultList'); // Clear resultList field. resultList.innerHTML = ''; // Set response data. JSON.parse(request.responseText).documents.forEach(result =&gt; &#123; result.keyPhrases.forEach(phrase =&gt; &#123; const li = document.createElement('li'); li.innerHTML = `&lt;label&gt;&lt;input type=\"checkbox\" /&gt;$&#123;phrase&#125;&lt;/label&gt;`; resultList.appendChild(li); &#125;); &#125;); &#125;; request.onerror = () =&gt; &#123; alert(request.responseText); &#125;; request.send(JSON.stringify(requestBody)); &#125;)(requestBody); &#125;);&#125;);&lt;/script&gt; Here is my whole code of this including docker files;)https://github.com/alpaca0984/text-smasher","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://alpaca0984.github.io/tags/JavaScript/"},{"name":"Azure","slug":"Azure","permalink":"http://alpaca0984.github.io/tags/Azure/"}]},{"title":"Nginx, Rails and Postgres with docker-compose","slug":"nginx-rails-postgres-with-docker-compose","date":"2017-08-31T14:32:34.000Z","updated":"2017-09-03T10:11:41.000Z","comments":true,"path":"2017/08/31/nginx-rails-postgres-with-docker-compose/","link":"","permalink":"http://alpaca0984.github.io/2017/08/31/nginx-rails-postgres-with-docker-compose/","excerpt":"","text":"I developed a web application environment with docker.It includes three containers, Nginx, Rails(puma) and Postgres. In addition, I created and ran a small application in it.It smash text into words so I named it “text-smasher”. In this page, I show you the recipes of my docker containers. Create Rails Docker fileAt first, I’m gonna create rails container and access it directly. Make project directory.1$ mkdir text-smasher &amp;&amp; cd $_ Make directories where I’m gonna put Docker file in.1$ mkdir -p docker/app Create docker file for rails.$ vim docker/app/Dockerfile123456789101112131415161718192021# Base image:FROM ruby:2.3.3# Install dependenciesRUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs# create application directoryRUN mkdir /myapp# Set our working directory inside the imageWORKDIR /myappADD Gemfile /myapp/GemfileADD Gemfile.lock /myapp/Gemfile.lockRUN bundle installADD . /myappEXPOSE 3000CMD [ \"bundle\", \"exec\", \"puma\", \"-C\", \"config/puma.rb\" ] Create docker-compose file$ vim docker-compose.yml1234567891011121314version: '3'services: app: build: context: . dockerfile: ./docker/app/Dockerfile volumes: - .:/myapp depends_on: - db ports: - 3000:3000 db: image: postgres Init Rails ProjectCreate Gemfile.1$ bundle init Activate rails gem.$ vim Gemfile123456source \"https://rubygems.org\"git_source(:github) &#123;|repo_name| \"https://github.com/#&#123;repo_name&#125;\" &#125;-# gem \"rails\"+gem \"rails\" Install gems and create rails project.You may be asked if you wanna overwrite gemfile, then press ‘Y’.1$ docker-compose run app bundle exec rails new . -d postgresql Set db host to postgres container.This is just sample, and you shoud define properly username and password.$ vim config/database.yml12345678 default: &amp;default adapter: postgresql encoding: unicode+ host: db+ username: postgres # For details on connection pooling, see Rails configuration guide # http://guides.rubyonrails.org/configuring.html#database-pooling pool: &lt;%= ENV.fetch(\"RAILS_MAX_THREADS\") &#123; 5 &#125; %&gt; Build docker image and create database.12$ docker-compose build$ docker-compose run app bundle exec rails db:create RAILS_ENV=production Run application.1$ docker-compose up All containers work well.12345$ docker-compose ps Name Command State Ports--------------------------------------------------------------------------------textsmasher_app_1 bundle exec puma -C config ... Up 0.0.0.0:3000-&gt;3000/tcptextsmasher_db_1 docker-entrypoint.sh postgres Up 5432/tcp I could see Rails’s welcome page through localhost:3000 ! Add Nginx’s containerSecond, I’m gonna create Nginx’s container and let it proxy to Puma.I used this page as reference.Codepany Blog &gt; RAILS 5 AND DOCKER (PUMA, NGINX) Create a directory which is related to nginx container.1$ mkdir docker/web Add nginx config file to proxy rails application.$ vim docker/web/app.conf1234567891011121314151617181920212223242526272829upstream puma_rails_app &#123; server app:3000;&#125;server &#123; listen 80; proxy_buffers 64 16k; proxy_max_temp_file_size 1024m; proxy_connect_timeout 5s; proxy_send_timeout 10s; proxy_read_timeout 10s; location / &#123; try_files $uri $uri/ @rails_app; &#125; location @rails_app &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; proxy_pass http://puma_rails_app; # limit_req zone=one; access_log /var/www/text-smasher/log/nginx.access.log; error_log /var/www/text-smasher/log/nginx.error.log; &#125;&#125; Create docker file for nginx.It refers config file I created in last step.$ vim docker/web/Dockerfile1234567891011121314151617181920212223242526272829# Base image:FROM nginx# Install dependenciesRUN apt-get update -qq &amp;&amp; apt-get -y install apache2-utils# establish where Nginx should look for filesENV RAILS_ROOT /var/www/text-smasher# Set our working directory inside the imageWORKDIR $RAILS_ROOT# create log directoryRUN mkdir log# copy over static assetsCOPY public public/# Copy Nginx config templateCOPY docker/web/app.conf /tmp/docker_example.nginx# substitute variable references in the Nginx config template for real values from the environment# put the final config in its placeRUN envsubst '$RAILS_ROOT' &lt; /tmp/docker_example.nginx &gt; /etc/nginx/conf.d/default.confEXPOSE 80# Use the \"exec\" form of CMD so Nginx shuts down gracefully on SIGTERM (i.e. `docker stop`)CMD [ \"nginx\", \"-g\", \"daemon off;\" ] Change docker-compose file to create nginx container.I’m gonna access rails application via nginx, so I deleted port mapping of it.$ vim docker-compose.yml12345678910111213141516171819202122version: '3'services:+ web:+ build:+ context: .+ dockerfile: ./docker/web/Dockerfile+ depends_on:+ - app+ ports:+ - 8080:80 app: build: context: . dockerfile: ./docker/app/Dockerfile volumes: - .:/myapp depends_on: - db- ports:- - 3000:3000 db: image: postgres Build and run the docker image12$ docker-compose build$ docker-compose up All containers work well.123456$ docker-compose ps Name Command State Ports------------------------------------------------------------------------------textsmasher_app_1 bundle exec puma -C config ... Up 3000/tcptextsmasher_db_1 docker-entrypoint.sh postgres Up 5432/tcptextsmasher_web_1 nginx -g daemon off; Up 0.0.0.0:8080-&gt;80/tcp When I access to localhost:8080, I can see rails’s welcome page again! I will write another post about the content of “text-smasher”.It is coming soon;)I wrote it!Call Azure's Text Analytics API from JavaScript","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://alpaca0984.github.io/tags/Nginx/"},{"name":"Rails","slug":"Rails","permalink":"http://alpaca0984.github.io/tags/Rails/"},{"name":"Postgres","slug":"Postgres","permalink":"http://alpaca0984.github.io/tags/Postgres/"},{"name":"Docker","slug":"Docker","permalink":"http://alpaca0984.github.io/tags/Docker/"}]},{"title":"Create yum repository","slug":"create-yum-repository","date":"2017-08-30T05:18:07.000Z","updated":"2017-09-03T10:05:07.000Z","comments":true,"path":"2017/08/30/create-yum-repository/","link":"","permalink":"http://alpaca0984.github.io/2017/08/30/create-yum-repository/","excerpt":"","text":"Previously, I created vim-rpm.Create vim rpm Next, I’m gonna create my own yum repository which installs above rpms with dependencies. PrerequisitesInstall a tool for creating repositories.1$ sudo yum install createrepo Init repository and add packagesCreate directory and init repository.12$ mkdir yumrepos &amp;&amp; cd $_$ createrepo . Setted up repository data.1234567891011[vagrant@localhost yumrepos]$ tree repodata/repodata/├── 01a3b489a465bcac22a43492163df43451dc6ce47d27f66de289756b91635523-filelists.sqlite.bz2├── 401dc19bda88c82c403423fb835844d64345f7e95f5b9835888189c03834cc93-filelists.xml.gz├── 5dc1e6e73c84803f059bb3065e684e56adfc289a7e398946574d79dac6643945-primary.sqlite.bz2├── 6bf9672d0862e8ef8b8ff05a2fd0208a922b1f5978e6589d87944c88259cb670-other.xml.gz├── 7c36572015e075add2b38b900837bcdbb8a504130ddff49b2351a7fc0affa3d4-other.sqlite.bz2├── dabe2ce5481d23de1f4f52bdcfee0f9af98316c9e0de2ce8123adeefa0dd08b9-primary.xml.gz└── repomd.xml0 directories, 7 files Create repository.Here, I named one alpaca-main.1[vagrant@localhost yumrepos]$ mkdir -p alpaca-main/Packages Add packages above directory.In my case, I used vim packages created previous post.12345678910[vagrant@localhost yumrepos]$ ls -la alpaca-main/Packages/total 14880drwxrwxr-x. 2 vagrant vagrant 4096 Aug 30 06:31 .drwxrwxr-x. 3 vagrant vagrant 22 Aug 30 06:30 ..-rw-rw-r--. 1 vagrant vagrant 6211132 Aug 30 06:31 vim-common-7.4.160-1.el7_3.alpaca.1.x86_64.rpm-rw-rw-r--. 1 vagrant vagrant 6233660 Aug 30 06:31 vim-debuginfo-7.4.160-1.el7_3.alpaca.1.x86_64.rpm-rw-rw-r--. 1 vagrant vagrant 1093852 Aug 30 06:31 vim-enhanced-7.4.160-1.el7_3.alpaca.1.x86_64.rpm-rw-rw-r--. 1 vagrant vagrant 8788 Aug 30 06:31 vim-filesystem-7.4.160-1.el7_3.alpaca.1.x86_64.rpm-rw-rw-r--. 1 vagrant vagrant 445508 Aug 30 06:31 vim-minimal-7.4.160-1.el7_3.alpaca.1.x86_64.rpm-rw-rw-r--. 1 vagrant vagrant 1226428 Aug 30 06:31 vim-X11-7.4.160-1.el7_3.alpaca.1.x86_64.rpm Write .repo to access rpms via yum command.$ vim /etc/yum.repos.d/alpaca-main.repo1234[alpaca-main]name=alpaca-main.$releaseverbaseurl=file:///home/vagrant/yumreposgpgcheck=0 Try install vim from my repository(disable built-in repositories of CentOS7).1$ sudo yum --disablerepo=updates,base --enablerepo=alpaca-main install vim If you couldn’t find your packeages, try to clear cache.1$ sudo yum clean --enablerepo=&lt;your-repo&gt; all I could install vim package from my alpaca-main repository!123456789101112131415161718192021222324252627282930313233343536[vagrant@localhost yumrepos]$ sudo yum --disablerepo=updates,base --enablerepo=alpaca-main install vimLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * extras: ftp.riken.jpResolving Dependencies--&gt; Running transaction check---&gt; Package vim-enhanced.x86_64 2:7.4.160-1.el7_3.alpaca.1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved========================================================================================================================================= Package Arch Version Repository Size=========================================================================================================================================Installing: vim-enhanced x86_64 2:7.4.160-1.el7_3.alpaca.1 alpaca-main 1.0 MTransaction Summary=========================================================================================================================================Install 1 PackageTotal download size: 1.0 MInstalled size: 2.2 MIs this ok [y/d/N]: yDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : 2:vim-enhanced-7.4.160-1.el7_3.alpaca.1.x86_64 1/1 Verifying : 2:vim-enhanced-7.4.160-1.el7_3.alpaca.1.x86_64 1/1Installed: vim-enhanced.x86_64 2:7.4.160-1.el7_3.alpaca.1Complete! Upload your packages wherever you wantI uploaded to Github.https://github.com/alpaca0984/rpm-pkgs And chage .repo file.$ vim /etc/yum.repos.d/alpaca-main.repo12- baseurl=file:///home/vagrant/yumrepos+ baseurl=https://raw.githubusercontent.com/alpaca0984/rpm-pkgs/master/x86_64 Create rpm for installing repository via yumI don’t wanna put /etc/yum.repos.d/alpaca-main.repo every time.So I’m gonna create rpm package which deploys above file. Configure .rpmmacros.$ vim ~/.rpmmacros12- %_topdir %(echo $HOME)/rpmbuild+ %_topdir %(echo $HOME)/&lt;your-repo-name&gt; Here, I named my package ‘alpaca-yum-repos’. Set up build-tree.1$ rpmdev-setuptree Then, rpm directories are prepared.123456789[vagrant@localhost ~]$ tree -d alpaca-yum-repos/├── BUILD├── repodata├── RPMS├── SOURCES├── SPECS└── SRPMS6 directories Add .repo file to SOURCE directoryPut alpaca-main.repo in SOURCE dir.It’s used in .spec file.1$ cp /etc/yum.repos.d/alpaca-main.repo ~/alpaca-yum-repos/SOURCES/ Initialize spec file and update it1$ rpmdev-newspec SPECS/alpaca-yum-repos.spec I got a template of spec file.123456789101112131415161718192021222324252627282930313233343536[vagrant@localhost alpaca-main]$ cat SPECS/alpaca-main.specName: alpaca-mainVersion:Release: 1%&#123;?dist&#125;Summary:License:URL:Source0:BuildRequires:Requires:%description%prep%setup -q%build%configuremake %&#123;?_smp_mflags&#125;%installrm -rf $RPM_BUILD_ROOT%make_install%files%doc%changelog Update .spec file$ vim SPECS/alpaca-yum-repos.spec123456789101112131415161718192021222324252627282930313233343536373839404142434445Name: alpaca-yum-reposVersion: 1Release: 1%&#123;?dist&#125;Summary: Alpaca0984&apos;s Original Packages for CentOSGroup: System Environment/BaseLicense: GPLv2URL: https://github.com/alpaca0984/yum-reposSource0: alpaca-main.repoBuildArch: noarchRequires: redhat-release &gt;= %&#123;version&#125;%description%prep%setup -q -c -T%build%installrm -rf $RPM_BUILD_ROOT# yuminstall -dm 755 $RPM_BUILD_ROOT%&#123;_sysconfdir&#125;/yum.repos.dinstall -pm 644 %&#123;SOURCE0&#125; \\ $RPM_BUILD_ROOT%&#123;_sysconfdir&#125;/yum.repos.d%cleanrm -rf $RPM_BUILD_ROOT%files%defattr(-,root,root,-)%doc%config(noreplace) /etc/yum.repos.d/*%changelog Build rpm packageBuild package.1$ rpmbuild -ba SPECS/alpaca-yum-repos.spec I got the rpm package!123456[vagrant@localhost alpaca-main]$ tree RPMSRPMS└── noarch └── alpaca-yum-repos-1-1.el7.centos.noarch.rpm1 directory, 1 file Install repository via yumFinally, I got to install my alpaca-main repository.123456789101112131415161718192021222324252627282930313233343536[vagrant@localhost alpaca-main]$ sudo yum install RPMS/noarch/alpaca-yum-repos-1-1.el7.centos.noarch.rpmLoaded plugins: fastestmirrorExamining RPMS/noarch/alpaca-yum-repos-1-1.el7.centos.noarch.rpm: alpaca-yum-repos-1-1.el7.centos.noarchMarking RPMS/noarch/alpaca-yum-repos-1-1.el7.centos.noarch.rpm to be installedResolving Dependencies--&gt; Running transaction check---&gt; Package alpaca-yum-repos.noarch 0:1-1.el7.centos will be installed--&gt; Finished Dependency ResolutionDependencies Resolved========================================================================================================================================= Package Arch Version Repository Size=========================================================================================================================================Installing: alpaca-yum-repos noarch 1-1.el7.centos /alpaca-yum-repos-1-1.el7.centos.noarch 130Transaction Summary=========================================================================================================================================Install 1 PackageTotal size: 130Installed size: 130Is this ok [y/d/N]: yDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : alpaca-yum-repos-1-1.el7.centos.noarch 1/1 Verifying : alpaca-yum-repos-1-1.el7.centos.noarch 1/1Installed: alpaca-yum-repos.noarch 0:1-1.el7.centosComplete! As described above, I uploaded my rpm packages on Github!You can install my alpaca repository.https://github.com/alpaca0984/rpm-pkgs","categories":[],"tags":[{"name":"RPM","slug":"RPM","permalink":"http://alpaca0984.github.io/tags/RPM/"},{"name":"CentOS7","slug":"CentOS7","permalink":"http://alpaca0984.github.io/tags/CentOS7/"},{"name":"Yum","slug":"Yum","permalink":"http://alpaca0984.github.io/tags/Yum/"}]},{"title":"Create vim rpm","slug":"create-vim-rpm","date":"2017-08-28T15:36:00.000Z","updated":"2017-09-03T10:03:45.000Z","comments":true,"path":"2017/08/29/create-vim-rpm/","link":"","permalink":"http://alpaca0984.github.io/2017/08/29/create-vim-rpm/","excerpt":"","text":"I use vim as main editor, with many plugins. One of my favorites is neocomplete.It requires vim with lua but when we install vim from yum, it isn’t.So I have to compile vim with lua when I set up new developing environment. It is little bother for me, so I created vim-rpm which is already build with lua.This is in CentOS7. Install dependencyWe use gcc and so on.1$ sudo yum groups install \"Development tools\" For downloading source rpm, and build rpm packages.1$ sudo yum install yum-utils rpmdevtools Configure .rpmmacrosWhen we install rpmdevtools, .rpmmacros file is created in our home directory.12345678910111213141516171819[vagrant@localhost ~]$ cat ~/.rpmmacros%_topdir %(echo $HOME)/rpmbuild%_smp_mflags %( \\ [ -z \"$RPM_BUILD_NCPUS\" ] \\\\\\ &amp;&amp; RPM_BUILD_NCPUS=\"`/usr/bin/nproc 2&gt;/dev/null || \\\\\\ /usr/bin/getconf _NPROCESSORS_ONLN`\"; \\\\\\ if [ \"$RPM_BUILD_NCPUS\" -gt 16 ]; then \\\\\\ echo \"-j16\"; \\\\\\ elif [ \"$RPM_BUILD_NCPUS\" -gt 3 ]; then \\\\\\ echo \"-j$RPM_BUILD_NCPUS\"; \\\\\\ else \\\\\\ echo \"-j3\"; \\\\\\ fi )%__arch_install_post \\ [ \"%&#123;buildarch&#125;\" = \"noarch\" ] || QA_CHECK_RPATHS=1 ; \\ case \"$&#123;QA_CHECK_RPATHS:-&#125;\" in [1yY]*) /usr/lib/rpm/check-rpaths ;; esac \\ /usr/lib/rpm/check-buildroot When we set %_topdir, RPM files are extracted under it.Now, I’m gonna create vim-7.4 rpm so name topdir vim74.$ vim ~/.rpmmacros12- %_topdir %(echo $HOME)/rpmbuild+ %_topdir %(echo $HOME)/vim74 Install vim7.4-src-rpmTo create new vim7.4-rpm, we have to get .spec file.First, download source rpm.1$ yumdownloader --source vim Now, we’ve got like a ‘vim-7.4.160-1.el7_3.1.src.rpm.Then, install it.1$ rpm -ivh vim-7.4.160-1.el7_3.1.src.rpm The ~/vim74 directory was automatically created and files are extracted.123456[vagrant@localhost ~]$ tree -d vim74/vim74/├── SOURCES└── SPECS2 directories Modify vim.specI want vim built with lua, so I configure vim with it.Here is changes of vim.spec.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455@@ -12,6 +12,7 @@ %define withvimspell 0 %define withhunspell 0 %define withruby 1+%define withlua 1 %define baseversion 7.4 %define vimdir vim74@@ -232,6 +233,9 @@ %if \"%&#123;withruby&#125;\" == \"1\" Buildrequires: ruby-devel ruby %endif+%if \"%&#123;withlua&#125;\" == \"1\"+Buildrequires: lua-devel+%endif %if %&#123;desktop_file&#125; # for /usr/bin/desktop-file-install Requires: desktop-file-utils@@ -556,6 +560,7 @@ --enable-gtk2-check --enable-gui=gtk2 \\ --with-compiledby=\"&lt;bugzilla@redhat.com&gt;\" --enable-cscope \\ --with-modified-by=\"&lt;bugzilla@redhat.com&gt;\" \\+ --enable-fail-if-missing \\ %if \"%&#123;withnetbeans&#125;\" == \"1\" --enable-netbeans \\ %else@@ -571,6 +576,11 @@ %else --disable-rubyinterp \\ %endif+%if \"%&#123;withlua&#125;\" == \"1\"+ --enable-luainterp=dynamic \\+%else+ --disable-luainterp \\+%endif make VIMRCLOC=/etc VIMRUNTIMEDIR=/usr/share/vim/%&#123;vimdir&#125; %&#123;?_smp_mflags&#125; cp vim gvim@@ -585,6 +595,7 @@ --enable-cscope --with-modified-by=\"&lt;bugzilla@redhat.com&gt;\" \\ --with-tlib=ncurses \\ --with-compiledby=\"&lt;bugzilla@redhat.com&gt;\" \\+ --enable-fail-if-missing \\ %if \"%&#123;withnetbeans&#125;\" == \"1\" --enable-netbeans \\ %else@@ -600,6 +611,11 @@ %else --disable-rubyinterp \\ %endif+%if \"%&#123;withlua&#125;\" == \"1\"+ --enable-luainterp=dynamic \\+%else+ --disable-luainterp \\+%endif Build new vim-rpmEventually, we build our own vim-rpm.If you haven’t installed lua-devel, you have to do.1$ sudo yum install lua-devel Build rpm.1$ rpmbuild -ba SPECS/vim.spec If you specify distribution, you path it as option.e.g.1$ rpmbuild -ba --define '.dist &lt;your-distribution&gt;' SPECS/vim.spec You get new vim rpms from vim74/RPM directory!1234567891011[vagrant@localhost vim74]$ tree ~/vim74/RPMS//home/vagrant/vim74/RPMS/└── x86_64 ├── vim-common-7.4.160-1.el7.centos.1.x86_64.rpm ├── vim-debuginfo-7.4.160-1.el7.centos.1.x86_64.rpm ├── vim-enhanced-7.4.160-1.el7.centos.1.x86_64.rpm ├── vim-filesystem-7.4.160-1.el7.centos.1.x86_64.rpm ├── vim-minimal-7.4.160-1.el7.centos.1.x86_64.rpm └── vim-X11-7.4.160-1.el7.centos.1.x86_64.rpm1 directory, 6 files You can download my vim-rpmI’m happy to have been able to help you out ;)https://github.com/alpaca0984/rpm-pkgs","categories":[],"tags":[{"name":"RPM","slug":"RPM","permalink":"http://alpaca0984.github.io/tags/RPM/"},{"name":"CentOS7","slug":"CentOS7","permalink":"http://alpaca0984.github.io/tags/CentOS7/"},{"name":"Vim","slug":"Vim","permalink":"http://alpaca0984.github.io/tags/Vim/"}]},{"title":"Pyenv disrupts installing vim through brew","slug":"pyenv-disrupts-installing-vim-through-brew","date":"2017-08-26T11:58:05.000Z","updated":"2017-09-03T10:03:39.000Z","comments":true,"path":"2017/08/26/pyenv-disrupts-installing-vim-through-brew/","link":"","permalink":"http://alpaca0984.github.io/2017/08/26/pyenv-disrupts-installing-vim-through-brew/","excerpt":"","text":"I tried $ brew reinstall vim but errors occured. 12345678910111213141516171819202122/Users/&lt;username&gt;% brew reinstall vim==&gt; Reinstalling vim --with-lua==&gt; Downloading https://github.com/vim/vim/archive/v8.0.0983.tar.gzAlready downloaded: /Users/&lt;username&gt;/Library/Caches/Homebrew/vim-8.0.0983.tar.gz==&gt; ./configure --prefix=/usr/local --mandir=/usr/local/Cellar/vim/8.0.0983/share/man --enable-multibyte --with-tlib=ncurses --enable-cscope --enable-terminal --with-compiledby=Homebrew --enable-luainterp==&gt; makeLast 15 lines from /Users/&lt;username&gt;/Library/Logs/Homebrew/vim/02.make:clang -c -I. -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/window.o window.cclang -c -I. -I/usr/local/include -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/if_lua.o if_lua.cclang -c -I. -g -DPERL_DARWIN -fno-strict-aliasing -fstack-protector -I/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/if_perl.o auto/if_perl.cclang -c -I. -g -DPERL_DARWIN -fno-strict-aliasing -fstack-protector -I/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/if_perlsfio.o if_perlsfio.cclang -c -I. -I/usr/local/Cellar/python/2.7.13_1/Frameworks/Python.framework/Versions/2.7/include/python2.7 -DPYTHON_HOME=&apos;&quot;/usr/local/Cellar/python/2.7.13_1/Frameworks/Python.framework/Versions/2.7&quot;&apos; -fPIE -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/if_python.o if_python.cclang -c -I. -I/Users/&lt;username&gt;/.rbenv/versions/2.3.3/include/ruby-2.3.0 -I/Users/&lt;username&gt;/.rbenv/versions/2.3.3/include/ruby-2.3.0/x86_64-darwin15 -DRUBY_VERSION=23 -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/if_ruby.o if_ruby.cclang -c -I. -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/netbeans.o netbeans.cclang -c -I. -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -o objects/channel.o channel.cif_python.c:67:10: fatal error: &apos;Python.h&apos; file not found#include &lt;Python.h&gt; ^1 error generated.make[1]: *** [objects/if_python.o] Error 1make[1]: *** Waiting for unfinished jobs....make: *** [first] Error 2 I read error messages and finally detected that python’s path is not located where Homebrew expects.Pyenv’s path-settings was in ~/.bash_profile, so temporary commented out them. $ vim ~/.bash_profile123456- export PYENV_ROOT=\"$HOME/.pyenv\"- export PATH=\"$PYENV_ROOT/bin:$PATH\"- eval \"$(pyenv init -)\"+ # export PYENV_ROOT=\"$HOME/.pyenv\"+ # export PATH=\"$PYENV_ROOT/bin:$PATH\"+ # eval \"$(pyenv init -)\" Then, reopened terminal and retried install vim. It worked well.12345678910/Users/&lt;username&gt;% brew reinstall vim==&gt; Reinstalling vim --with-lua==&gt; Downloading https://github.com/vim/vim/archive/v8.0.0972.tar.gz==&gt; Downloading from https://codeload.github.com/vim/vim/tar.gz/v8.0.0972######################################################################## 100.0%==&gt; ./configure --prefix=/usr/local --mandir=/usr/local/Cellar/vim/8.0.0972/share/man --enable-multibyte --with-tlib=ncurses --enable-cscope --enable-terminal --with-compiledby=Home==&gt; make==&gt; make install prefix=/usr/local/Cellar/vim/8.0.0972 STRIP=/usr/bin/true🍺 /usr/local/Cellar/vim/8.0.0972: 1,415 files, 25.6MB, built in 1 minute 25 secondsShare","categories":[{"name":"Development Environment","slug":"Development-Environment","permalink":"http://alpaca0984.github.io/categories/Development-Environment/"}],"tags":[{"name":"Vim","slug":"Vim","permalink":"http://alpaca0984.github.io/tags/Vim/"},{"name":"Homebrew","slug":"Homebrew","permalink":"http://alpaca0984.github.io/tags/Homebrew/"},{"name":"pyenv","slug":"pyenv","permalink":"http://alpaca0984.github.io/tags/pyenv/"}]}]}